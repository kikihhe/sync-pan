name: Deploy server

on:
  push:
    branches:
      - deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 设置 JDK 8
      - name: Set up JDK 8
        uses: actions/setup-java@v1
        with:
          java-version: '8'

      # 构建 server 模块
      - name: Build server module with Maven
        run: mvn package -DskipTests

      # 调试：检查 web/target/ 目录
      - name: Debug web/target directory
        run: |
          if [ -f "server/web/target/web-1.0-SNAPSHOT.jar" ]; then
            echo "JAR file exists: server/web/target/web-1.0-SNAPSHOT.jar"
          else
            echo "JAR file does not exist: server/web/target/web-1.0-SNAPSHOT.jar"
            exit 1
          fi
          

      # 构建 Docker 镜像
      - name: Build Docker image
        run: docker build -t sync-pan-server:latest ./server

      # 保存 Docker 镜像为 tar 文件
      - name: Save Docker image
        run: docker save -o sync-pan-server.tar sync-pan-server:latest

      # 将 Docker 镜像传输到服务器
      - name: Copy Docker image to server
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no sync-pan-server.tar root@8.137.53.199:/root/workspace/sync-pan/sync-pan-server.tar

      # 在服务器上加载并运行 Docker 镜像
      - name: Load and run Docker image on server
        run: |
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no root@8.137.53.199 << 'EOF'
          cd /root/workspace/sync-pan
          docker load -i sync-pan-server.tar
          docker stop sync-pan-server || true
          docker rm sync-pan-server || true
          docker run -d --name sync-pan-server -p 8080:8080 sync-pan-server:latest
          
          # 等待服务启动
          sleep 10

          # 测试 /hello 接口
          echo "Testing /hello endpoint..."
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" http://localhost:8080/hello)
          body=$(echo "$response" | grep -v "HTTP_STATUS" | tr -d '\n')
          status=$(echo "$response" | grep "HTTP_STATUS" | cut -d':' -f2)

          # 输出响应体和状态码
          echo "Response body: $body"
          echo "HTTP status code: $status"

          # 验证状态码和响应体
          if [ "$status" != "200" ]; then
            echo "Error: HTTP status code is not 200"
            exit 1
          fi

          if ! echo "$body" | jq -e '.code == 200 and .message == "success" and .data == "你好"' > /dev/null; then
            echo "Error: Response body does not match expected structure"
            exit 1
          fi

          echo "Test passed!"
          EOF